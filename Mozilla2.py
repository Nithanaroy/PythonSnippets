import json
import operator


def test_data():
    return {'20150822': [148, 53, 603, 1653, 2614, 4182, 12901, 9397, 21270, 33460, 34868, 55750, 72322, 112975, 161421,
                         193304, 277192, 399066, 556997, 829446, 1046772, 1177037, 1413060, 1514906, 1502633, 1496325,
                         1419025, 1249414, 1127460, 930685, 772304, 627628, 491643, 376886, 303195, 231997, 176086,
                         112717, 77696, 59559, 44725, 39089, 32373, 25364, 28513, 31636, 11185, 4472, 3144, 3816],
            '20150823': [247, 123, 910, 2661, 5369, 7557, 8837, 11343, 29838, 39966, 40670, 69050, 87727, 146368,
                         231482, 250670, 326694, 494283, 674333, 955382, 1258144, 1478651, 1755679, 1879135, 1868050,
                         1803862, 1661392, 1457926, 1304778, 1103602, 929979, 757474, 613613, 514297, 393773, 274108,
                         190951, 137246, 101922, 85633, 51497, 34117, 32038, 22112, 27094, 22116, 7144, 3046, 1989,
                         3383],
            '20150821': [145, 40, 671, 1840, 2938, 4176, 5829, 7568, 30811, 37222, 41701, 82504, 91362, 121016, 173779,
                         229009, 274989, 414859, 584912, 803896, 1013508, 1203622, 1460970, 1563948, 1588434, 1568711,
                         1469800, 1296617, 1093826, 949667, 803358, 657376, 524857, 416909, 320122, 272549, 168979,
                         117453, 90340, 58231, 42594, 34658, 26224, 29790, 36252, 28914, 10942, 4409, 3123, 3680],
            '20150826': [109, 24, 109, 409, 1020, 1741, 2499, 3198, 7779, 9318, 11658, 21529, 27304, 46343, 67477,
                         72486, 95416, 148926, 195723, 252135, 337991, 410375, 503603, 502776, 494094, 486551, 463963,
                         427221, 379913, 323032, 318678, 224942, 179037, 146010, 146853, 135537, 75838, 41615, 28689,
                         20550, 12013, 9479, 8479, 7799, 8202, 7306, 2323, 1263, 824, 1251],
            '20150827': [285, 88, 940, 2486, 4313, 7025, 11599, 10127, 26681, 28698, 39861, 82560, 94610, 158720,
                         230969, 242773, 325605, 525574, 736717, 981954, 1311424, 1566317, 1877694, 1944630, 1883763,
                         1779887, 1654728, 1449217, 1254660, 1110275, 909588, 765905, 645675, 516221, 405867, 297823,
                         198457, 149802, 95792, 68238, 48124, 38599, 33546, 24961, 36886, 40778, 9623, 4633, 2920,
                         6893],
            '20150824': [212, 138, 1140, 2571, 4043, 5390, 7027, 9366, 27039, 46585, 62864, 82679, 103063, 153214,
                         224428, 271824, 343771, 501877, 693165, 974767, 1227719, 1467687, 1767225, 1871990, 1865907,
                         1777130, 1637451, 1434946, 1265809, 1100456, 918757, 754066, 600978, 445888, 355633, 277115,
                         197962, 144843, 102571, 80956, 50004, 37734, 30432, 28690, 49680, 55275, 10930, 5477, 2498,
                         4877],
            '20150825': [337, 134, 1974, 4724, 12427, 17525, 14607, 12427, 33458, 42743, 61940, 105600, 136382, 239529,
                         345101, 375086, 531254, 773475, 1055461, 1497125, 1974023, 2325943, 2759238, 2967425, 2873581,
                         2751308, 2548891, 2223983, 1954358, 1668370, 1373258, 1090887, 875022, 707900, 549020, 374571,
                         270468, 201639, 136843, 103220, 81019, 57878, 51162, 34993, 59122, 62600, 17536, 8683, 6556,
                         8737],
            '20150828': [219, 115, 1214, 3000, 4659, 6318, 8959, 11225, 39116, 44346, 55476, 92899, 116322, 198281,
                         331318, 341545, 452900, 776037, 1059590, 1416448, 1779773, 2151793, 2496830, 2677981, 2714727,
                         2614583, 2422231, 2112908, 1906633, 1646869, 1399712, 1096249, 886337, 694034, 588456, 427580,
                         306213, 229455, 171049, 126562, 98072, 73119, 51020, 37571, 49706, 53447, 15462, 6835, 4462,
                         9966],
            '20150829': [58, 7, 85, 296, 472, 717, 849, 984, 3357, 4023, 6035, 10262, 13857, 25543, 39387, 63046, 63511,
                         88348, 125598, 156393, 192936, 234599, 269743, 290454, 285808, 265814, 242094, 222290, 200057,
                         174286, 142591, 116116, 97938, 76326, 59187, 44174, 30871, 22897, 17460, 12905, 8516, 6786,
                         12949, 5620, 5707, 5785, 1373, 518, 395, 767],
            '20150830': [221, 78, 977, 2511, 3597, 4969, 9328, 11454, 28403, 29403, 37019, 64300, 84630, 144418, 223512,
                         253631, 373606, 583718, 748401, 1042908, 1314662, 1496577, 1779314, 1878141, 1836562, 1780954,
                         1639901, 1442106, 1331863, 1082218, 911909, 733565, 602648, 479640, 372202, 286053, 206729,
                         144020, 126450, 90304, 55974, 76719, 65936, 27055, 27084, 27693, 15413, 4804, 2589, 5016]}


def test_data2():
    return {'20150912': [0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 12, 26, 26, 54, 2695, 3275, 1133, 597, 410, 733],
            '20150913': [0, 0, 0, 0, 0, 0, 1, 1, 2, 12, 5, 16, 20, 56, 2842, 3880, 1348, 852, 583, 922],
            '20150916': [0, 0, 0, 0, 0, 0, 4, 3, 4, 3, 7, 8, 35, 67, 2746, 3484, 1493, 889, 573, 916],
            '20150917': [0, 0, 0, 0, 0, 2, 0, 1, 3, 13, 18, 26, 46, 72, 8896, 2656, 904, 281, 54, 26],
            '20150914': [0, 0, 0, 0, 1, 0, 1, 0, 4, 6, 9, 26, 30, 36, 3028, 3809, 1620, 916, 621, 929],
            '20150915': [0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 11, 22, 39, 66, 2946, 4072, 1699, 923, 628, 969],
            '20150918': [0, 0, 0, 0, 0, 0, 1, 2, 4, 12, 14, 25, 55, 87, 9726, 2754, 1001, 307, 101, 37],
            '20150919': [0, 0, 0, 0, 0, 0, 3, 1, 3, 14, 3, 35, 57, 76, 11434, 4141, 1580, 507, 102, 29],
            '20150921': [0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 7, 10, 17, 24, 2589, 1283, 262, 82, 18, 7],
            '20150920': [0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 17, 18, 43, 59, 8108, 3042, 1012, 331, 71, 36]}


def read_input():
    raw_data = json.loads(raw_input())
    data = {}
    for t in raw_data:
        key = str(t['date'])
        value = t['histogram']
        data[key] = value
    return data


def compute_averages(numbers):
    l = len(numbers)
    mean = sum(numbers) / l
    numbers.sort()
    if l % 2 == 0:
        median = (numbers[l / 2] + numbers[l / 2 - 1]) / 2
    else:
        median = numbers[l / 2]
    return [round(mean, 2), round(median, 2)]


def find_max_diff(n):
    max_diff = 0
    index = -1
    for i in range(len(n) - 1, 0, -1):
        diff = abs(n[i][0] - n[i - 1][0])
        if diff > max_diff:
            max_diff = diff
            index = i
    return index


# Idea 1: Find mean of (mean and median) each day = M, [sort by M], find day with max diff with
def find_the_odd_day1(data):
    daily_stats = []
    return mean_median_each_day(daily_stats, data)


def mean_median_each_day(daily_stats, data):
    for day in data:
        mean, median = compute_averages(data[day])
        daily_stats.append(((mean + median) / 2, day))
    # daily_stats.sort()
    odd_day = find_max_diff(daily_stats)
    return daily_stats[odd_day]


# Idea 2: Construct BSTs for each array and odd one is the tree with odd height
# Idea Credits: Anudeep Reddy Gogulamodi (My Roommate)
class Node:
    def __init__(self, val):
        self.l_child = None
        self.r_child = None
        self.data = val


def binary_insert(root, node):
    if root is None:
        root = node
    else:
        if root.data > node.data:
            if root.l_child is None:
                root.l_child = node
            else:
                binary_insert(root.l_child, node)
        else:
            if root.r_child is None:
                root.r_child = node
            else:
                binary_insert(root.r_child, node)


def create_tree(node_values):
    if len(node_values) == 0:
        return None
    root = Node(node_values[0])
    for v in node_values[1:]:
        binary_insert(root, Node(v))
    return root


def in_order_print(root):
    if not root:
        return
    in_order_print(root.l_child)
    print root.data
    in_order_print(root.r_child)


# metric 1: height of tree
def get_tree_height(root):
    if root is None:
        return 0
    else:
        return max(get_tree_height(root.l_child), get_tree_height(root.r_child)) + 1


def get_tree_diameter(root):
    if root is None:
        return 0
    else:
        return get_tree_height(root.l_child) + get_tree_height(root.r_child) + 1


def find_odd_day2(data):
    reps = {}
    for day in data:
        root = create_tree(data[day])
        # reps[day] = get_tree_height(root)
        reps[day] = get_tree_diameter(root)

        sorted_x = sorted(reps.items(), key=operator.itemgetter(1))
        return sorted_x[0][0]
        m1 = abs(sorted_x[0][1] - sorted_x[1][1])
        m2 = abs(sorted_x[len(sorted_x) - 1][1] - sorted_x[len(sorted_x) - 2][1])
        if m1 > m2:
            return sorted_x[0][0]
        else:
            return sorted_x[len(sorted_x) - 1][0]


def main():
    # data = read_input()
    # data = test_data() # no odd day
    data = test_data2()  # has odd day
    # print find_the_odd_day1(data)
    print find_odd_day2(data)


if __name__ == '__main__':
    main()
